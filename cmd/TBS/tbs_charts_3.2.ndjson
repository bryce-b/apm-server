{"attributes":{"fieldAttrs":"{}","fields":"[]","runtimeFieldMap":"{}","timeFieldName":"timestamp","title":".monitoring*","typeMeta":"{}"},"coreMigrationVersion":"7.16.0","id":"c0fe8dd4-36d9-4368-afd0-2647cce2f643","migrationVersion":{"index-pattern":"7.11.0"},"references":[],"type":"index-pattern","updated_at":"2021-11-04T20:56:57.425Z","version":"WzI2MjMsMl0="}
{"attributes":{"fieldAttrs":"{\"transaction.id\":{\"count\":4},\"transaction.name\":{\"count\":1}}","fieldFormatMap":"{\"client.bytes\":{\"id\":\"bytes\"},\"client.nat.port\":{\"id\":\"string\"},\"client.port\":{\"id\":\"string\"},\"destination.bytes\":{\"id\":\"bytes\"},\"destination.nat.port\":{\"id\":\"string\"},\"destination.port\":{\"id\":\"string\"},\"event.duration\":{\"id\":\"duration\",\"params\":{\"inputFormat\":\"nanoseconds\",\"outputFormat\":\"asMilliseconds\",\"outputPrecision\":1}},\"event.sequence\":{\"id\":\"string\"},\"event.severity\":{\"id\":\"string\"},\"http.request.body.bytes\":{\"id\":\"bytes\"},\"http.request.bytes\":{\"id\":\"bytes\"},\"http.response.body.bytes\":{\"id\":\"bytes\"},\"http.response.bytes\":{\"id\":\"bytes\"},\"http.response.status_code\":{\"id\":\"string\"},\"log.syslog.facility.code\":{\"id\":\"string\"},\"log.syslog.priority\":{\"id\":\"string\"},\"network.bytes\":{\"id\":\"bytes\"},\"package.size\":{\"id\":\"string\"},\"process.parent.pgid\":{\"id\":\"string\"},\"process.parent.pid\":{\"id\":\"string\"},\"process.parent.ppid\":{\"id\":\"string\"},\"process.parent.thread.id\":{\"id\":\"string\"},\"process.pgid\":{\"id\":\"string\"},\"process.pid\":{\"id\":\"string\"},\"process.ppid\":{\"id\":\"string\"},\"process.thread.id\":{\"id\":\"string\"},\"server.bytes\":{\"id\":\"bytes\"},\"server.nat.port\":{\"id\":\"string\"},\"server.port\":{\"id\":\"string\"},\"source.bytes\":{\"id\":\"bytes\"},\"source.nat.port\":{\"id\":\"string\"},\"source.port\":{\"id\":\"string\"},\"system.cpu.total.norm.pct\":{\"id\":\"percent\"},\"system.memory.actual.free\":{\"id\":\"bytes\"},\"system.memory.total\":{\"id\":\"bytes\"},\"system.process.cgroup.memory.mem.limit.bytes\":{\"id\":\"bytes\"},\"system.process.cgroup.memory.mem.usage.bytes\":{\"id\":\"bytes\"},\"system.process.cpu.total.norm.pct\":{\"id\":\"percent\"},\"system.process.memory.rss.bytes\":{\"id\":\"bytes\"},\"system.process.memory.size\":{\"id\":\"bytes\"},\"url.port\":{\"id\":\"string\"}}","fields":"[]","runtimeFieldMap":"{}","sourceFilters":"[{\"value\":\"sourcemap.sourcemap\"}]","timeFieldName":"@timestamp","title":"traces-apm*,apm-*,logs-apm*,apm-*,metrics-apm*,apm-*","typeMeta":"{}"},"coreMigrationVersion":"7.16.0","id":"a67d5e52-3e7e-45f3-b3ef-531be1a52eb6","migrationVersion":{"index-pattern":"7.11.0"},"references":[],"type":"index-pattern","updated_at":"2021-11-04T20:56:57.425Z","version":"WzI2MjQsMl0="}
{"attributes":{"description":"","hits":0,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"},"optionsJSON":"{\"useMargins\":true,\"syncColors\":false,\"hidePanelTitles\":false}","panelsJSON":"[{\"version\":\"7.16.0-SNAPSHOT\",\"type\":\"lens\",\"gridData\":{\"x\":0,\"y\":0,\"w\":24,\"h\":15,\"i\":\"0489e760-b269-4428-b8e7-d0e1c56bdee2\"},\"panelIndex\":\"0489e760-b269-4428-b8e7-d0e1c56bdee2\",\"embeddableConfig\":{\"attributes\":{\"title\":\"Events\",\"description\":\"\",\"visualizationType\":\"lnsXY\",\"type\":\"lens\",\"references\":[{\"id\":\"c0fe8dd4-36d9-4368-afd0-2647cce2f643\",\"name\":\"indexpattern-datasource-current-indexpattern\",\"type\":\"index-pattern\"},{\"id\":\"c0fe8dd4-36d9-4368-afd0-2647cce2f643\",\"name\":\"indexpattern-datasource-layer-7bc78198-7af0-4039-a187-6da4ab64ed94\",\"type\":\"index-pattern\"}],\"state\":{\"visualization\":{\"title\":\"Empty XY chart\",\"legend\":{\"isVisible\":true,\"position\":\"right\"},\"valueLabels\":\"hide\",\"preferredSeriesType\":\"line\",\"layers\":[{\"layerId\":\"7bc78198-7af0-4039-a187-6da4ab64ed94\",\"accessors\":[\"110cb314-4f5f-4408-a0ed-9cab57d74607\",\"33d3493b-ea46-4090-93c0-59801f3476e5\",\"f2618432-20a3-4f8a-bc14-0f395b1bc0d8\",\"68ef7530-f97f-444f-a9c0-585fac8882b7\"],\"position\":\"top\",\"seriesType\":\"line\",\"showGridlines\":false,\"layerType\":\"data\",\"xAccessor\":\"b4588ce6-b103-47db-b65f-8c38cd7ae59e\"}],\"yRightExtent\":{\"mode\":\"full\"},\"yLeftExtent\":{\"mode\":\"full\"}},\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filters\":[],\"datasourceStates\":{\"indexpattern\":{\"layers\":{\"7bc78198-7af0-4039-a187-6da4ab64ed94\":{\"columns\":{\"110cb314-4f5f-4408-a0ed-9cab57d74607\":{\"label\":\"processed\",\"dataType\":\"number\",\"operationType\":\"median\",\"sourceField\":\"beats_stats.metrics.apm-server.sampling.tail.events.processed\",\"isBucketed\":false,\"scale\":\"ratio\",\"customLabel\":true},\"33d3493b-ea46-4090-93c0-59801f3476e5\":{\"label\":\"stored\",\"dataType\":\"number\",\"operationType\":\"median\",\"sourceField\":\"beats_stats.metrics.apm-server.sampling.tail.events.stored\",\"isBucketed\":false,\"scale\":\"ratio\",\"customLabel\":true},\"b4588ce6-b103-47db-b65f-8c38cd7ae59e\":{\"label\":\"timestamp\",\"dataType\":\"date\",\"operationType\":\"date_histogram\",\"sourceField\":\"timestamp\",\"isBucketed\":true,\"scale\":\"interval\",\"params\":{\"interval\":\"auto\"}},\"f2618432-20a3-4f8a-bc14-0f395b1bc0d8\":{\"label\":\"unsampled saved\",\"dataType\":\"number\",\"operationType\":\"median\",\"sourceField\":\"beats_stats.metrics.apm-server.sampling.tail.events.head_unsampled\",\"isBucketed\":false,\"scale\":\"ratio\",\"customLabel\":true},\"68ef7530-f97f-444f-a9c0-585fac8882b7\":{\"label\":\"sampled\",\"dataType\":\"number\",\"operationType\":\"median\",\"sourceField\":\"beats_stats.metrics.apm-server.sampling.tail.events.sampled\",\"isBucketed\":false,\"scale\":\"ratio\",\"customLabel\":true}},\"columnOrder\":[\"b4588ce6-b103-47db-b65f-8c38cd7ae59e\",\"110cb314-4f5f-4408-a0ed-9cab57d74607\",\"33d3493b-ea46-4090-93c0-59801f3476e5\",\"f2618432-20a3-4f8a-bc14-0f395b1bc0d8\",\"68ef7530-f97f-444f-a9c0-585fac8882b7\"],\"incompleteColumns\":{}}}}}}},\"enhancements\":{}}},{\"version\":\"7.16.0-SNAPSHOT\",\"type\":\"lens\",\"gridData\":{\"x\":24,\"y\":0,\"w\":24,\"h\":15,\"i\":\"50b29924-bc49-4cf3-bfa5-fd8980fa30fb\"},\"panelIndex\":\"50b29924-bc49-4cf3-bfa5-fd8980fa30fb\",\"embeddableConfig\":{\"attributes\":{\"title\":\"\",\"visualizationType\":\"lnsXY\",\"type\":\"lens\",\"references\":[{\"type\":\"index-pattern\",\"id\":\"c0fe8dd4-36d9-4368-afd0-2647cce2f643\",\"name\":\"indexpattern-datasource-current-indexpattern\"},{\"type\":\"index-pattern\",\"id\":\"c0fe8dd4-36d9-4368-afd0-2647cce2f643\",\"name\":\"indexpattern-datasource-layer-0ad64302-f67a-4142-a7bd-ee28e54acbf8\"}],\"state\":{\"visualization\":{\"legend\":{\"isVisible\":true,\"position\":\"right\"},\"valueLabels\":\"hide\",\"fittingFunction\":\"None\",\"yLeftExtent\":{\"mode\":\"full\"},\"yRightExtent\":{\"mode\":\"full\"},\"axisTitlesVisibilitySettings\":{\"x\":true,\"yLeft\":true,\"yRight\":true},\"tickLabelsVisibilitySettings\":{\"x\":true,\"yLeft\":true,\"yRight\":true},\"labelsOrientation\":{\"x\":0,\"yLeft\":0,\"yRight\":0},\"gridlinesVisibilitySettings\":{\"x\":true,\"yLeft\":true,\"yRight\":true},\"preferredSeriesType\":\"line\",\"layers\":[{\"layerId\":\"0ad64302-f67a-4142-a7bd-ee28e54acbf8\",\"accessors\":[\"ec886ed5-2a6c-4704-a17e-bf0d95a03946\",\"8a95131c-1110-4c64-ab00-6f3fc07e78b3\"],\"position\":\"top\",\"seriesType\":\"line\",\"showGridlines\":false,\"layerType\":\"data\",\"xAccessor\":\"c15a7d33-7390-40b7-9808-54c025d99d4f\"}]},\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filters\":[],\"datasourceStates\":{\"indexpattern\":{\"layers\":{\"0ad64302-f67a-4142-a7bd-ee28e54acbf8\":{\"columns\":{\"c15a7d33-7390-40b7-9808-54c025d99d4f\":{\"label\":\"timestamp\",\"dataType\":\"date\",\"operationType\":\"date_histogram\",\"sourceField\":\"timestamp\",\"isBucketed\":true,\"scale\":\"interval\",\"params\":{\"interval\":\"auto\"}},\"ec886ed5-2a6c-4704-a17e-bf0d95a03946\":{\"label\":\"storage.lsm_size\",\"dataType\":\"number\",\"operationType\":\"median\",\"sourceField\":\"beats_stats.metrics.apm-server.sampling.tail.storage.lsm_size\",\"isBucketed\":false,\"scale\":\"ratio\",\"customLabel\":true},\"8a95131c-1110-4c64-ab00-6f3fc07e78b3\":{\"label\":\"storage.value_log_size\",\"dataType\":\"number\",\"operationType\":\"median\",\"sourceField\":\"beats_stats.metrics.apm-server.sampling.tail.storage.value_log_size\",\"isBucketed\":false,\"scale\":\"ratio\",\"customLabel\":true}},\"columnOrder\":[\"c15a7d33-7390-40b7-9808-54c025d99d4f\",\"ec886ed5-2a6c-4704-a17e-bf0d95a03946\",\"8a95131c-1110-4c64-ab00-6f3fc07e78b3\"],\"incompleteColumns\":{}}}}}}},\"enhancements\":{}}},{\"version\":\"7.16.0-SNAPSHOT\",\"type\":\"visualization\",\"gridData\":{\"x\":0,\"y\":15,\"w\":24,\"h\":15,\"i\":\"8d1dd8a8-1c51-436e-aa6c-cb0ea4e921ee\"},\"panelIndex\":\"8d1dd8a8-1c51-436e-aa6c-cb0ea4e921ee\",\"embeddableConfig\":{\"savedVis\":{\"title\":\"Response time histogram [metrics]\",\"description\":\"\",\"type\":\"vega\",\"params\":{\"spec\":\"{\\n/*\\n\\nWelcome to Vega visualizations.  Here you can design your own dataviz from scratch using a declarative language called Vega, or its simpler form Vega-Lite.  In Vega, you have the full control of what data is loaded, even from multiple sources, how that data is transformed, and what visual elements are used to show it.  Use help icon to view Vega examples, tutorials, and other docs.  Use the wrench icon to reformat this text, or to remove comments.\\n\\nThis example graph shows the document count in all indexes in the current time range.  You might need to adjust the time filter in the upper right corner.\\n*/\\n\\n  $schema: https://vega.github.io/schema/vega-lite/v5.json\\n  title: Event counts from all indexes\\n\\n  // Define the data source\\n  data: {\\n    url: {\\n/*\\nAn object instead of a string for the \\\"url\\\" param is treated as an Elasticsearch query. Anything inside this object is not part of the Vega language, but only understood by Kibana and Elasticsearch server. This query counts the number of documents per time interval, assuming you have a @timestamp field in your data.\\n\\nKibana has a special handling for the fields surrounded by \\\"%\\\".  They are processed before the the query is sent to Elasticsearch. This way the query becomes context aware, and can use the time range and the dashboard filters.\\n*/\\n\\n/*\\nSee .search() documentation for :  https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-search\\n*/\\n\\n      // Filter the time picker (upper right corner) with this field\\n\\n      \\n      // Which index to search\\n      index: metrics*\\n      // Aggregate data by the time field into time buckets, counting the number of documents in each bucket.\\n      body: {\\n        aggs: {\\n          breakdown: {\\n            histogram: {\\n              field: transaction.duration.histogram\\n              interval: 100\\n              min_doc_count: 1\\n            }\\n          }\\n        }\\n        query: {\\n          bool: {\\n                      must: [\\n              %dashboard_context-must_clause%\\n            ]\\n            filter: [\\n              {\\n                term: {\\n                  metricset.name: transaction\\n                }\\n              }\\n              {\\n                range: {\\n                  @timestamp: {\\n                    gte: {%timefilter%: \\\"min\\\"}\\n                    lte: {%timefilter%: \\\"max\\\"}\\n                  }\\n                }\\n              }\\n                            %dashboard_context-filter_clause%\\n\\n            ]\\n            must_not: [\\n              {\\n                term: {\\n                  service.name: {\\n                    value: apm-server\\n                  }\\n                }\\n              }\\n            ]\\n          }\\n        }\\n        size: 0\\n      }\\n    }\\n/*\\nElasticsearch will return results in this format:\\n\\naggregations: {\\n  time_buckets: {\\n    buckets: [\\n      {\\n        key_as_string: 2015-11-30T22:00:00.000Z\\n        key: 1448920800000\\n        doc_count: 0\\n      },\\n      {\\n        key_as_string: 2015-11-30T23:00:00.000Z\\n        key: 1448924400000\\n        doc_count: 0\\n      }\\n      ...\\n    ]\\n  }\\n}\\n\\nFor our graph, we only need the list of bucket values.  Use the format.property to discard everything else.\\n*/\\n    format: {\\n      property: aggregations.breakdown.buckets\\n    }\\n  }\\n  transform: [\\n    {\\n      calculate: datum.key / 1000000\\n      as: seconds\\n    }\\n  ]\\n\\n  // \\\"mark\\\" is the graphics element used to show our data.  Other mark values are: area, bar, circle, line, point, rect, rule, square, text, and tick.  See https://vega.github.io/vega-lite/docs/mark.html\\n  mark: bar\\n\\n  // \\\"encoding\\\" tells the \\\"mark\\\" what data to use and in what way.  See https://vega.github.io/vega-lite/docs/encoding.html\\n  encoding: {\\n    x: {\\n      // The \\\"key\\\" value is the timestamp in milliseconds.  Use it for X axis.\\n      field: seconds\\n      type: quantitative\\n      // bin: {\\n      //   nice: true\\n      //   // step: 1 // extent: [0, 9000000]\\n      // }\\n      axis: {\\n        title: Response time (sec)\\n      } // Customize X axis format\\n    }\\n    y: {\\n      // The \\\"doc_count\\\" is the count per bucket.  Use it for Y axis.\\n      field: doc_count\\n      type: quantitative\\n      axis: {\\n        title: false\\n      }\\n    }\\n  }\\n}\"},\"uiState\":{},\"data\":{\"aggs\":[],\"searchSource\":{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}}},\"enhancements\":{},\"hidePanelTitles\":false},\"title\":\"Transaction response times [metrics index]\"},{\"version\":\"7.16.0-SNAPSHOT\",\"type\":\"visualization\",\"gridData\":{\"x\":24,\"y\":15,\"w\":24,\"h\":15,\"i\":\"bf66925c-0ddf-4364-9399-c7c5fdbefbdf\"},\"panelIndex\":\"bf66925c-0ddf-4364-9399-c7c5fdbefbdf\",\"embeddableConfig\":{\"savedVis\":{\"title\":\"Transaction repsonse times [ trace index ] \",\"description\":\"\",\"type\":\"vega\",\"params\":{\"spec\":\"{\\n/*\\n\\nWelcome to Vega visualizations.  Here you can design your own dataviz from scratch using a declarative language called Vega, or its simpler form Vega-Lite.  In Vega, you have the full control of what data is loaded, even from multiple sources, how that data is transformed, and what visual elements are used to show it.  Use help icon to view Vega examples, tutorials, and other docs.  Use the wrench icon to reformat this text, or to remove comments.\\n\\nThis example graph shows the document count in all indexes in the current time range.  You might need to adjust the time filter in the upper right corner.\\n*/\\n\\n  $schema: https://vega.github.io/schema/vega-lite/v5.json\\n  title: Event counts from all indexes\\n\\n  // Define the data source\\n  data: {\\n    url: {\\n/*\\nAn object instead of a string for the \\\"url\\\" param is treated as an Elasticsearch query. Anything inside this object is not part of the Vega language, but only understood by Kibana and Elasticsearch server. This query counts the number of documents per time interval, assuming you have a @timestamp field in your data.\\n\\nKibana has a special handling for the fields surrounded by \\\"%\\\".  They are processed before the the query is sent to Elasticsearch. This way the query becomes context aware, and can use the time range and the dashboard filters.\\n*/\\n\\n/*\\nSee .search() documentation for :  https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-search\\n*/\\n\\n      // Which index to search\\n      index: _all\\n      // Aggregate data by the time field into time buckets, counting the number of documents in each bucket.\\n      body: {\\n        aggs: {\\n          responseTime: {\\n            histogram: {\\n              field: transaction.duration.us\\n              interval: 100\\n              min_doc_count: 1\\n            }\\n          }\\n        }\\n        query: {\\n          bool: {\\n            must: [\\n              %dashboard_context-must_clause%\\n            ]\\n            filter: [\\n              {\\n                term: {\\n                  transaction.type: request\\n                }\\n              }\\n              {\\n                range: {\\n                  @timestamp: {\\n                    gte: {\\n                      %timefilter%: min\\n                    }\\n                    lte: {\\n                      %timefilter%: max\\n                    }\\n                  }\\n                }\\n              }\\n              %dashboard_context-filter_clause%\\n            ]\\n          }\\n        }\\n        size: 0\\n      }\\n    }\\n/*\\nElasticsearch will return results in this format:\\n\\naggregations: {\\n  time_buckets: {\\n    buckets: [\\n      {\\n        key_as_string: 2015-11-30T22:00:00.000Z\\n        key: 1448920800000\\n        doc_count: 0\\n      },\\n      {\\n        key_as_string: 2015-11-30T23:00:00.000Z\\n        key: 1448924400000\\n        doc_count: 0\\n      }\\n      ...\\n    ]\\n  }\\n}\\n\\nFor our graph, we only need the list of bucket values.  Use the format.property to discard everything else.\\n*/\\n    format: {\\n      property: aggregations.responseTime.buckets\\n    }\\n  }\\n  transform: [\\n    {\\n      calculate: datum.key / 1000000\\n      as: seconds\\n    }\\n  ]\\n\\n  // \\\"mark\\\" is the graphics element used to show our data.  Other mark values are: area, bar, circle, line, point, rect, rule, square, text, and tick.  See https://vega.github.io/vega-lite/docs/mark.html\\n  mark: bar\\n\\n  // \\\"encoding\\\" tells the \\\"mark\\\" what data to use and in what way.  See https://vega.github.io/vega-lite/docs/encoding.html\\n  encoding: {\\n    x: {\\n      // The \\\"key\\\" value is the timestamp in milliseconds.  Use it for X axis.\\n      field: seconds\\n      type: quantitative\\n      axis: {\\n        title: response time (sec)\\n      } // Customize X axis format\\n    }\\n    y: {\\n      // The \\\"doc_count\\\" is the count per bucket.  Use it for Y axis.\\n      field: doc_count\\n      type: quantitative\\n      axis: {\\n        title: false\\n      }\\n    }\\n  }\\n}\"},\"uiState\":{},\"data\":{\"aggs\":[],\"searchSource\":{\"query\":{\"language\":\"kuery\",\"query\":\"\"},\"filter\":[]}}},\"enhancements\":{}}},{\"version\":\"7.16.0-SNAPSHOT\",\"type\":\"lens\",\"gridData\":{\"x\":24,\"y\":30,\"w\":24,\"h\":15,\"i\":\"e2610b24-e519-4632-a09d-474764b9391f\"},\"panelIndex\":\"e2610b24-e519-4632-a09d-474764b9391f\",\"embeddableConfig\":{\"attributes\":{\"title\":\"\",\"visualizationType\":\"lnsMetric\",\"type\":\"lens\",\"references\":[{\"id\":\"a67d5e52-3e7e-45f3-b3ef-531be1a52eb6\",\"name\":\"indexpattern-datasource-current-indexpattern\",\"type\":\"index-pattern\"},{\"id\":\"a67d5e52-3e7e-45f3-b3ef-531be1a52eb6\",\"name\":\"indexpattern-datasource-layer-4a60c77c-3886-4d2a-8b5f-c1e2eba57629\",\"type\":\"index-pattern\"},{\"id\":\"a67d5e52-3e7e-45f3-b3ef-531be1a52eb6\",\"name\":\"filter-index-pattern-0\",\"type\":\"index-pattern\"},{\"id\":\"a67d5e52-3e7e-45f3-b3ef-531be1a52eb6\",\"name\":\"filter-index-pattern-1\",\"type\":\"index-pattern\"}],\"state\":{\"visualization\":{\"layerId\":\"4a60c77c-3886-4d2a-8b5f-c1e2eba57629\",\"accessor\":\"38ba0551-f929-48d2-887a-1a35dab82938\",\"layerType\":\"data\"},\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filters\":[{\"meta\":{\"alias\":null,\"negate\":false,\"disabled\":false,\"type\":\"phrase\",\"key\":\"transaction.type\",\"params\":{\"query\":\"request\"},\"indexRefName\":\"filter-index-pattern-0\"},\"query\":{\"match_phrase\":{\"transaction.type\":\"request\"}},\"$state\":{\"store\":\"appState\"}},{\"meta\":{\"alias\":null,\"negate\":false,\"disabled\":false,\"type\":\"phrase\",\"key\":\"_index\",\"params\":{\"query\":\"trace*\"},\"indexRefName\":\"filter-index-pattern-1\"},\"query\":{\"match_phrase\":{\"_index\":\"trace*\"}},\"$state\":{\"store\":\"appState\"}}],\"datasourceStates\":{\"indexpattern\":{\"layers\":{\"4a60c77c-3886-4d2a-8b5f-c1e2eba57629\":{\"columns\":{\"38ba0551-f929-48d2-887a-1a35dab82938\":{\"label\":\"transactions (Traces)\",\"dataType\":\"number\",\"operationType\":\"count\",\"isBucketed\":false,\"scale\":\"ratio\",\"sourceField\":\"Records\",\"customLabel\":true}},\"columnOrder\":[\"38ba0551-f929-48d2-887a-1a35dab82938\"],\"incompleteColumns\":{}}}}}}},\"enhancements\":{}}},{\"version\":\"7.16.0-SNAPSHOT\",\"type\":\"visualization\",\"gridData\":{\"x\":0,\"y\":30,\"w\":24,\"h\":15,\"i\":\"b148f636-0d89-4df4-ad2d-7ef3f09af981\"},\"panelIndex\":\"b148f636-0d89-4df4-ad2d-7ef3f09af981\",\"embeddableConfig\":{\"savedVis\":{\"title\":\"Metric Counts\",\"description\":\"\",\"type\":\"vega\",\"params\":{\"spec\":\"{\\n/*\\n\\nWelcome to Vega visualizations.  Here you can design your own dataviz from scratch using a declarative language called Vega, or its simpler form Vega-Lite.  In Vega, you have the full control of what data is loaded, even from multiple sources, how that data is transformed, and what visual elements are used to show it.  Use help icon to view Vega examples, tutorials, and other docs.  Use the wrench icon to reformat this text, or to remove comments.\\n\\nThis example graph shows the document count in all indexes in the current time range.  You might need to adjust the time filter in the upper right corner.\\n*/\\n\\n  $schema: https://vega.github.io/schema/vega-lite/v5.json\\n  title: Metric Transaction Count\\n\\n  // Define the data source\\n  data: {\\n    url: {\\n/*\\nAn object instead of a string for the \\\"url\\\" param is treated as an Elasticsearch query. Anything inside this object is not part of the Vega language, but only understood by Kibana and Elasticsearch server. This query counts the number of documents per time interval, assuming you have a @timestamp field in your data.\\n\\nKibana has a special handling for the fields surrounded by \\\"%\\\".  They are processed before the the query is sent to Elasticsearch. This way the query becomes context aware, and can use the time range and the dashboard filters.\\n*/\\n\\n/*\\nSee .search() documentation for :  https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-search\\n*/\\n\\n      // Which index to search\\n      index: _all\\n      // Aggregate data by the time field into time buckets, counting the number of documents in each bucket.\\n      body: {\\n        query: {\\n          bool: {\\n            must: [\\n             \\\"%dashboard_context-must_clause%\\\"\\n            ]\\n            filter:[\\n              {term: {\\n                  metricset.name: transaction\\n              }}\\n              { term: {\\n                transaction.type: request\\n              }}\\n              { range: {\\n                @timestamp: {\\n                  gte: {\\n                    %timefilter%: min\\n                  }\\n                  lte: {\\n                    %timefilter%: max\\n                  }\\n                }\\n              }}\\n              \\\"%dashboard_context-filter_clause%\\\"\\n            ]\\n          }\\n        }\\n        aggs: {\\n          count: {\\n            value_count: {\\n              field: transaction.duration.histogram\\n            }\\n          }\\n        }\\n        // Speed up the response by only including aggregation results\\n        size: 0\\n      }\\n    }\\n/*\\nElasticsearch will return results in this format:\\n\\naggregations: {\\n  time_buckets: {\\n    buckets: [\\n      {\\n        key_as_string: 2015-11-30T22:00:00.000Z\\n        key: 1448920800000\\n        doc_count: 0\\n      },\\n      {\\n        key_as_string: 2015-11-30T23:00:00.000Z\\n        key: 1448924400000\\n        doc_count: 0\\n      }\\n      ...\\n    ]\\n  }\\n}\\n\\nFor our graph, we only need the list of bucket values.  Use the format.property to discard everything else.\\n*/\\n    format: {\\n      property: aggregations.count\\n    }\\n  }\\n\\n  // \\\"mark\\\" is the graphics element used to show our data.  Other mark values are: area, bar, circle, line, point, rect, rule, square, text, and tick.  See https://vega.github.io/vega-lite/docs/mark.html\\n  mark: {\\n    type: text\\n    fontSize: 80\\n    fontWeight: bold\\n  }\\n\\n  // \\\"encoding\\\" tells the \\\"mark\\\" what data to use and in what way.  See https://vega.github.io/vega-lite/docs/encoding.html\\n  encoding: {\\n    text: {\\n      field: value\\n      type: quantitative\\n    }\\n  }\\n}\"},\"uiState\":{},\"data\":{\"aggs\":[],\"searchSource\":{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}}},\"enhancements\":{}}},{\"version\":\"7.16.0-SNAPSHOT\",\"type\":\"visualization\",\"gridData\":{\"x\":0,\"y\":45,\"w\":24,\"h\":15,\"i\":\"227e860d-41d6-49e5-8173-bed48ea71b71\"},\"panelIndex\":\"227e860d-41d6-49e5-8173-bed48ea71b71\",\"embeddableConfig\":{\"savedVis\":{\"title\":\"Metric Counts\",\"description\":\"\",\"type\":\"vega\",\"params\":{\"spec\":\"{\\n  \\\"$schema\\\": \\\"https://vega.github.io/schema/vega-lite/v5.json\\\",\\n  \\\"title\\\": \\\"Trace Transaction Count\\\",\\n  \\\"data\\\": {\\n    \\\"url\\\": {\\n      \\\"index\\\": \\\"_all\\\",\\n      \\\"body\\\": {\\n        \\\"query\\\": {\\n          \\\"bool\\\": {\\n            \\\"must\\\": [\\\"%dashboard_context-must_clause%\\\"],\\n            \\\"filter\\\": [\\n              {\\\"term\\\": {\\\"transaction.type\\\": \\\"request\\\"}},\\n              {\\\"term\\\": { \\\"_index\\\": \\\"trace*\\\"}},\\n              {\\n                \\\"range\\\": {\\n                  \\\"@timestamp\\\": {\\n                    \\\"gte\\\": {\\\"%timefilter%\\\": \\\"min\\\"},\\n                    \\\"lte\\\": {\\\"%timefilter%\\\": \\\"max\\\"}\\n                  }\\n                }\\n              },\\n              \\\"%dashboard_context-filter_clause%\\\"\\n            ]\\n          }\\n        },\\n        \\\"size\\\": 0\\n      }\\n    },\\n    \\\"format\\\": {\\\"property\\\": \\\"hits\\\"}\\n  },\\n  \\\"mark\\\": {\\\"type\\\": \\\"text\\\", \\\"fontSize\\\": 80, \\\"fontWeight\\\": \\\"bold\\\"},\\n  \\\"encoding\\\": {\\\"text\\\": {\\\"field\\\": \\\"total\\\", \\\"type\\\": \\\"quantitative\\\"}}\\n}\"},\"uiState\":{},\"data\":{\"aggs\":[],\"searchSource\":{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}}},\"enhancements\":{}}}]","timeRestore":false,"title":"Tail Based Sampling 3.2","version":1},"coreMigrationVersion":"7.16.0","id":"28f1e410-3e5b-11ec-9d90-255d03007a09","migrationVersion":{"dashboard":"7.16.0"},"references":[{"id":"c0fe8dd4-36d9-4368-afd0-2647cce2f643","name":"0489e760-b269-4428-b8e7-d0e1c56bdee2:indexpattern-datasource-current-indexpattern","type":"index-pattern"},{"id":"c0fe8dd4-36d9-4368-afd0-2647cce2f643","name":"0489e760-b269-4428-b8e7-d0e1c56bdee2:indexpattern-datasource-layer-7bc78198-7af0-4039-a187-6da4ab64ed94","type":"index-pattern"},{"id":"c0fe8dd4-36d9-4368-afd0-2647cce2f643","name":"50b29924-bc49-4cf3-bfa5-fd8980fa30fb:indexpattern-datasource-current-indexpattern","type":"index-pattern"},{"id":"c0fe8dd4-36d9-4368-afd0-2647cce2f643","name":"50b29924-bc49-4cf3-bfa5-fd8980fa30fb:indexpattern-datasource-layer-0ad64302-f67a-4142-a7bd-ee28e54acbf8","type":"index-pattern"},{"id":"a67d5e52-3e7e-45f3-b3ef-531be1a52eb6","name":"e2610b24-e519-4632-a09d-474764b9391f:indexpattern-datasource-current-indexpattern","type":"index-pattern"},{"id":"a67d5e52-3e7e-45f3-b3ef-531be1a52eb6","name":"e2610b24-e519-4632-a09d-474764b9391f:indexpattern-datasource-layer-4a60c77c-3886-4d2a-8b5f-c1e2eba57629","type":"index-pattern"},{"id":"a67d5e52-3e7e-45f3-b3ef-531be1a52eb6","name":"e2610b24-e519-4632-a09d-474764b9391f:filter-index-pattern-0","type":"index-pattern"},{"id":"a67d5e52-3e7e-45f3-b3ef-531be1a52eb6","name":"e2610b24-e519-4632-a09d-474764b9391f:filter-index-pattern-1","type":"index-pattern"}],"type":"dashboard","updated_at":"2021-11-05T17:09:39.162Z","version":"WzkxMjU4LDJd"}
{"excludedObjects":[],"excludedObjectsCount":0,"exportedCount":3,"missingRefCount":0,"missingReferences":[]}